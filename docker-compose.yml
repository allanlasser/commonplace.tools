services:

  # db:
  #   image: postgis/postgis
  #   volumes:
  #     - ./data/db:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres

  # django:
  #   build: 
  #     context: .
  #     dockerfile: ./config/backend/Dockerfile
  #   command: python backend/manage.py runserver 0.0.0.0:8000
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - POSTGRES_NAME=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #   depends_on:
  #     - db

  sveltekit:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    command: npm run start
    ports:
      - "3000:3000"
    environment:
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      VIRTUAL_PORT: ${VIRTUAL_PORT}
      LETSENCRYPT_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    restart: unless-stopped

  # nginx-proxy:
  #   container_name: nginx-proxy
  #   build:
  #     context: .
  #     dockerfile: ./config/nginx/Dockerfile
  #   volumes:
  #     - certs:/etc/nginx/certs:ro
  #     - /etc/nginx/vhost.d
  #     - /etc/acme.sh
  #     - /usr/share/nginx/html
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   restart: unless-stopped

  # letsencrypt:
  #   image: nginxproxy/acme-companion
  #   environment:
  #     NGINX_DOCKER_GEN_CONTAINER: nginx-proxy
  #   volumes:
  #     - certs:/etc/nginx/certs
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   volumes_from:
  #     - nginx-proxy
  #   restart: unless-stopped
  #   depends_on:
  #     - nginx-proxy
  
# volumes:
#    certs: